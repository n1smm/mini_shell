// example
// -(x+5) * -2
// id:
// infix operators
// prefix operators
// parens
// postfix operators
// function calls
//
//precedence (some expressions have different preference) -- 7 - (6 * 9)
//associativity (operands with equal precedence - want to process them in order) -- (7-5) + 1 
//
//grammar
//non-terminal (grammar symbols) - are symbols that are not finial ( can be reduced to someting else)
//terminals (tokens/lexical symbols) - this can't be reduced further, are represented as is
//rules - the ways our grammar behaves
//classes of inputs - like id or integer
//
//Tokens:
//id -identifier
//{char} can be one or more of same - ID	char {char} or {char}+
//char {char|digit|_} - can be a set of all this things

##lexical Analysis
"lexer", "tokenizer"

code:
function scanToken()
var:
nextToken
(each time we call the function it will point to the newly scanned token)


classes?:
so each node has left/right pointer and each node of a list can contain another list with it's said 

each class has different way of evaluating what to do with the tokens

##parsing algorithm

functions 
parseE () will parse an expression
parseT () parse a term
parseF () parse a factor
-one for each non-terminal grammar symbol
each will:
-scan a bunch of tokens.
-Return a ptr to the treee it builds
details:
-at any moment, nextToken will contain the next UNSCANED thing from the input
- call scanToken to advance
-return NULL if problems.

##parse f  - parse a term - E->id|integer|(E)|-F
if nextToken is ID
	return token
else if 
